import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [61, 84, 41, 49, 43, 12, 3, 82, 53, 27];
    const expected = [3, 12, 27, 41, 43, 49, 53, 61, 82, 84];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [97, 10, 50, 23, 66, 71, 4, 93, 12, 51, 72, 39, 27, 30, 48, 77, 95, 2, 90, 59, 66, 40, 25, 40, 21, 57, 93, 46, 82, 88, 11, 52, 18, 61, 80, 62, 90, 54, 63, 2, 4, 57, 86, 3, 70, 55, 58, 66, 80, 44, 20, 99, 14, 13, 75, 58, 33, 23, 16, 78, 17, 87, 95, 31, 26, 33, 28, 99, 72, 20, 54, 1, 19, 98, 96, 88, 52, 18, 2, 95, 32, 67, 73, 37, 7, 39, 63, 92, 23, 42, 36, 42, 65, 55, 35, 62, 48, 72, 71, 29];
    const expected = [1, 2, 2, 2, 3, 4, 4, 7, 10, 11, 12, 13, 14, 16, 17, 18, 18, 19, 20, 20, 21, 23, 23, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 35, 36, 37, 39, 39, 40, 40, 42, 42, 44, 46, 48, 48, 50, 51, 52, 52, 54, 54, 55, 55, 57, 57, 58, 58, 59, 61, 62, 62, 63, 63, 65, 66, 66, 66, 67, 70, 71, 71, 72, 72, 72, 73, 75, 77, 78, 80, 80, 82, 86, 87, 88, 88, 90, 90, 92, 93, 93, 95, 95, 95, 96, 97, 98, 99, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [43, 51, 33, 39, 0, 40, 94, 91, 61, 80, 49, 97, 58, 10, 80, 27, 92, 68, 69, 67, 15, 33, 24, 6, 31, 14, 74, 83, 11, 80, 27, 51, 44, 9, 97, 19, 75, 7, 14, 10, 35, 82, 9, 34, 65, 55, 28, 0, 16, 83, 79, 33, 41, 75, 88, 1, 69, 29, 3, 99, 70, 11, 57, 82, 10, 58, 92, 88, 63, 79, 21, 84, 78, 30, 54, 26, 53, 85, 26, 62, 51, 70, 72, 93, 53, 23, 47, 23, 69, 56, 50, 18, 32, 68, 4, 44, 1, 11, 82, 97, 33, 27, 82, 31, 99, 88, 32, 55, 63, 3, 95, 24, 57, 8, 75, 27, 27, 6, 34, 21, 1, 96, 66, 40, 16, 31, 53, 45, 80, 72, 88, 31, 93, 73, 85, 1, 52, 93, 9, 93, 85, 1, 6, 33, 36, 94, 8, 65, 81, 18, 38, 90, 81, 85, 7, 57, 10, 94, 12, 21, 31, 56, 96, 23, 24, 49, 28, 69, 52, 20, 17, 8, 18, 79, 43, 79, 29, 12, 13, 68, 96, 4, 79, 19, 47, 70, 2, 35, 38, 40, 38, 64, 24, 50, 41, 99, 59, 96, 85, 1, 48, 90, 16, 85, 29, 19, 80, 92, 55, 58, 51, 63, 77, 69, 27, 47, 8, 23, 80, 0, 73, 21, 11, 83, 48, 28, 26, 87, 52, 18, 63, 61, 35, 15, 38, 92, 97, 47, 39, 81, 5, 96, 82, 20, 5, 69, 24, 83, 59, 40];
    const expected = [0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 16, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 21, 23, 23, 23, 23, 24, 24, 24, 24, 24, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 31, 31, 31, 31, 31, 32, 32, 33, 33, 33, 33, 33, 34, 34, 35, 35, 35, 36, 38, 38, 38, 38, 39, 39, 40, 40, 40, 40, 41, 41, 43, 43, 44, 44, 45, 47, 47, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 55, 55, 55, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 61, 61, 62, 63, 63, 63, 63, 64, 65, 65, 66, 67, 68, 68, 68, 69, 69, 69, 69, 69, 69, 70, 70, 70, 72, 72, 73, 73, 74, 75, 75, 75, 77, 78, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 84, 85, 85, 85, 85, 85, 85, 87, 88, 88, 88, 88, 90, 90, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 99, 99, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
