import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [95, 33, 38, 83, 46, 75, 92, 30, 19, 4];
    const expected = [4, 19, 30, 33, 38, 46, 75, 83, 92, 95];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [87, 96, 46, 63, 41, 6, 35, 68, 30, 70, 99, 98, 32, 98, 8, 68, 82, 53, 85, 51, 75, 90, 75, 81, 95, 38, 73, 26, 40, 86, 1, 30, 56, 11, 65, 89, 46, 67, 52, 48, 58, 28, 54, 90, 13, 52, 26, 54, 46, 86, 98, 97, 12, 14, 1, 20, 81, 20, 1, 53, 66, 50, 54, 76, 29, 85, 6, 48, 84, 2, 80, 21, 6, 31, 88, 22, 2, 93, 25, 6, 9, 51, 40, 97, 77, 2, 67, 39, 78, 48, 63, 67, 32, 42, 56, 87, 53, 82, 76, 56];
    const expected = [1, 1, 1, 2, 2, 2, 6, 6, 6, 6, 8, 9, 11, 12, 13, 14, 20, 20, 21, 22, 25, 26, 26, 28, 29, 30, 30, 31, 32, 32, 35, 38, 39, 40, 40, 41, 42, 46, 46, 46, 48, 48, 48, 50, 51, 51, 52, 52, 53, 53, 53, 54, 54, 54, 56, 56, 56, 58, 63, 63, 65, 66, 67, 67, 67, 68, 68, 70, 73, 75, 75, 76, 76, 77, 78, 80, 81, 81, 82, 82, 84, 85, 85, 86, 86, 87, 87, 88, 89, 90, 90, 93, 95, 96, 97, 97, 98, 98, 98, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [78, 63, 63, 90, 1, 88, 60, 63, 77, 33, 53, 57, 61, 65, 92, 97, 47, 24, 83, 62, 32, 8, 82, 78, 11, 0, 25, 15, 25, 61, 84, 36, 0, 49, 71, 8, 96, 56, 14, 17, 19, 96, 36, 52, 72, 16, 14, 22, 66, 19, 97, 35, 65, 40, 32, 33, 76, 71, 37, 32, 94, 70, 42, 84, 98, 55, 18, 47, 1, 81, 95, 91, 0, 98, 70, 82, 54, 32, 57, 14, 16, 68, 42, 81, 14, 9, 59, 11, 91, 90, 73, 16, 14, 48, 44, 96, 15, 55, 42, 21, 22, 80, 57, 14, 63, 86, 94, 27, 92, 32, 62, 41, 96, 1, 57, 23, 65, 13, 15, 23, 96, 10, 71, 55, 6, 57, 93, 26, 57, 40, 60, 70, 99, 86, 24, 11, 99, 7, 17, 96, 32, 24, 48, 79, 97, 95, 95, 61, 87, 89, 84, 30, 56, 61, 97, 45, 68, 90, 61, 48, 5, 69, 91, 57, 39, 55, 35, 68, 80, 28, 12, 17, 75, 8, 49, 58, 7, 61, 19, 49, 55, 99, 10, 93, 97, 24, 58, 35, 57, 44, 40, 19, 65, 22, 72, 58, 93, 90, 60, 86, 94, 35, 53, 31, 13, 87, 22, 53, 72, 40, 97, 18, 8, 82, 86, 56, 81, 25, 31, 71, 62, 76, 42, 98, 72, 88, 8, 69, 6, 62, 42, 87, 10, 79, 29, 83, 54, 95, 3, 6, 79, 58, 16, 4, 36, 85, 31, 54, 65, 29];
    const expected = [0, 0, 0, 1, 1, 1, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 10, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 19, 19, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 27, 28, 29, 29, 30, 31, 31, 31, 32, 32, 32, 32, 32, 32, 33, 33, 35, 35, 35, 35, 36, 36, 36, 37, 39, 40, 40, 40, 40, 41, 42, 42, 42, 42, 42, 44, 44, 45, 47, 47, 48, 48, 48, 49, 49, 49, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 59, 60, 60, 60, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 65, 65, 65, 65, 65, 66, 68, 68, 68, 69, 69, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 73, 75, 76, 76, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 84, 84, 84, 85, 86, 86, 86, 86, 87, 87, 87, 88, 88, 89, 90, 90, 90, 90, 91, 91, 91, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 98, 98, 98, 99, 99, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
