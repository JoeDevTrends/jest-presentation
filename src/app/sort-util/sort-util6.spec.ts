import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [65, 89, 40, 29, 63, 49, 80, 59, 77, 40];
    const expected = [29, 40, 40, 49, 59, 63, 65, 77, 80, 89];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [16, 29, 65, 33, 70, 71, 98, 10, 97, 29, 47, 20, 2, 11, 10, 27, 62, 2, 43, 9, 0, 30, 66, 3, 23, 28, 15, 97, 4, 8, 38, 20, 2, 70, 72, 97, 0, 27, 89, 23, 38, 88, 27, 21, 51, 24, 57, 36, 71, 90, 64, 44, 92, 94, 89, 34, 79, 82, 86, 32, 69, 88, 22, 21, 87, 95, 30, 8, 49, 46, 80, 31, 74, 26, 52, 0, 6, 35, 97, 42, 50, 27, 9, 49, 88, 84, 64, 39, 52, 99, 41, 27, 79, 55, 0, 10, 29, 50, 70, 56];
    const expected = [0, 0, 0, 0, 2, 2, 2, 3, 4, 6, 8, 8, 9, 9, 10, 10, 10, 11, 15, 16, 20, 20, 21, 21, 22, 23, 23, 24, 26, 27, 27, 27, 27, 27, 28, 29, 29, 29, 30, 30, 31, 32, 33, 34, 35, 36, 38, 38, 39, 41, 42, 43, 44, 46, 47, 49, 49, 50, 50, 51, 52, 52, 55, 56, 57, 62, 64, 64, 65, 66, 69, 70, 70, 70, 71, 71, 72, 74, 79, 79, 80, 82, 84, 86, 87, 88, 88, 88, 89, 89, 90, 92, 94, 95, 97, 97, 97, 97, 98, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [69, 78, 74, 85, 61, 74, 12, 43, 21, 99, 11, 70, 40, 92, 27, 37, 8, 95, 36, 10, 90, 84, 0, 51, 48, 60, 82, 85, 69, 73, 94, 42, 70, 86, 29, 35, 7, 56, 9, 35, 98, 7, 7, 47, 36, 88, 2, 3, 47, 32, 61, 38, 49, 50, 24, 25, 39, 42, 84, 22, 3, 17, 36, 4, 22, 71, 18, 72, 91, 54, 8, 78, 89, 53, 65, 57, 21, 33, 71, 50, 32, 36, 22, 91, 38, 86, 26, 55, 95, 80, 96, 35, 4, 96, 48, 60, 30, 43, 23, 62, 66, 52, 23, 61, 82, 18, 69, 51, 67, 64, 92, 48, 28, 50, 80, 1, 15, 6, 77, 70, 6, 94, 10, 73, 0, 78, 36, 69, 43, 99, 10, 85, 30, 6, 72, 52, 73, 28, 72, 26, 96, 67, 11, 94, 98, 14, 4, 55, 32, 81, 69, 42, 18, 20, 49, 74, 88, 15, 13, 25, 74, 9, 7, 88, 25, 12, 98, 72, 16, 13, 70, 88, 45, 10, 30, 78, 96, 87, 79, 88, 1, 74, 51, 70, 99, 3, 4, 43, 69, 19, 51, 99, 74, 99, 60, 11, 41, 57, 81, 54, 85, 5, 20, 26, 32, 57, 13, 34, 59, 91, 63, 34, 20, 64, 18, 72, 36, 67, 54, 67, 90, 40, 50, 63, 98, 24, 6, 86, 69, 35, 75, 39, 30, 41, 47, 33, 54, 10, 65, 72, 60, 42, 74, 80, 45, 20, 45, 22, 0, 73];
    const expected = [0, 0, 0, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 15, 15, 16, 17, 18, 18, 18, 18, 19, 20, 20, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 30, 30, 30, 30, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 45, 45, 45, 47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 53, 54, 54, 54, 54, 55, 55, 56, 57, 57, 57, 59, 60, 60, 60, 60, 61, 61, 61, 62, 63, 63, 64, 64, 65, 65, 66, 67, 67, 67, 67, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 77, 78, 78, 78, 78, 79, 80, 80, 80, 81, 81, 82, 82, 84, 84, 85, 85, 85, 85, 86, 86, 86, 87, 88, 88, 88, 88, 88, 89, 90, 90, 91, 91, 91, 92, 92, 94, 94, 94, 95, 95, 96, 96, 96, 96, 98, 98, 98, 98, 99, 99, 99, 99, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
