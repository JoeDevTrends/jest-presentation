import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [39, 7, 57, 7, 54, 55, 36, 39, 61, 69];
    const expected = [7, 7, 36, 39, 39, 54, 55, 57, 61, 69];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [35, 95, 22, 69, 91, 74, 65, 1, 31, 76, 38, 90, 96, 26, 63, 44, 50, 23, 61, 67, 22, 24, 3, 96, 68, 41, 58, 50, 64, 58, 26, 79, 25, 21, 76, 82, 6, 62, 9, 63, 19, 82, 28, 30, 36, 73, 1, 37, 89, 19, 15, 7, 13, 72, 77, 53, 64, 88, 0, 28, 95, 1, 31, 23, 46, 38, 83, 47, 22, 53, 42, 1, 32, 10, 41, 20, 12, 32, 77, 32, 0, 67, 37, 2, 35, 15, 6, 27, 91, 36, 9, 4, 69, 10, 12, 70, 74, 20, 13, 73];
    const expected = [0, 0, 1, 1, 1, 1, 2, 3, 4, 6, 6, 7, 9, 9, 10, 10, 12, 12, 13, 13, 15, 15, 19, 19, 20, 20, 21, 22, 22, 22, 23, 23, 24, 25, 26, 26, 27, 28, 28, 30, 31, 31, 32, 32, 32, 35, 35, 36, 36, 37, 37, 38, 38, 41, 41, 42, 44, 46, 47, 50, 50, 53, 53, 58, 58, 61, 62, 63, 63, 64, 64, 65, 67, 67, 68, 69, 69, 70, 72, 73, 73, 74, 74, 76, 76, 77, 77, 79, 82, 82, 83, 88, 89, 90, 91, 91, 95, 95, 96, 96];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [22, 3, 40, 87, 20, 26, 50, 99, 3, 51, 52, 65, 86, 58, 53, 11, 11, 52, 19, 80, 33, 94, 14, 88, 85, 84, 43, 50, 50, 68, 72, 46, 60, 83, 7, 0, 14, 89, 31, 49, 66, 87, 0, 90, 14, 77, 84, 0, 57, 88, 32, 46, 29, 88, 26, 65, 18, 74, 58, 97, 33, 77, 19, 5, 68, 48, 21, 64, 33, 32, 73, 4, 95, 19, 11, 65, 64, 64, 10, 42, 54, 15, 22, 28, 77, 97, 74, 22, 82, 23, 23, 25, 56, 57, 83, 57, 78, 77, 1, 8, 23, 3, 24, 9, 69, 33, 85, 88, 68, 64, 47, 45, 8, 76, 94, 90, 91, 93, 46, 95, 9, 32, 87, 8, 3, 39, 0, 64, 63, 60, 71, 48, 13, 92, 94, 63, 92, 61, 2, 9, 81, 68, 69, 77, 75, 52, 60, 28, 50, 38, 8, 57, 81, 35, 87, 41, 40, 76, 20, 67, 61, 18, 71, 74, 22, 15, 46, 41, 39, 74, 99, 78, 89, 92, 5, 77, 98, 58, 86, 11, 5, 31, 93, 95, 17, 15, 49, 30, 75, 72, 81, 90, 41, 69, 87, 37, 21, 69, 72, 52, 86, 12, 29, 54, 83, 22, 61, 23, 68, 61, 95, 45, 12, 40, 46, 15, 46, 17, 22, 7, 82, 17, 1, 51, 82, 17, 10, 78, 78, 33, 88, 57, 7, 47, 7, 51, 3, 58, 77, 99, 31, 36, 76, 57, 66, 85, 25, 48, 80, 77];
    const expected = [0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 11, 12, 12, 13, 14, 14, 14, 15, 15, 15, 15, 17, 17, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 25, 25, 26, 26, 28, 28, 29, 29, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 33, 33, 35, 36, 37, 38, 39, 39, 40, 40, 40, 41, 41, 41, 42, 43, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 52, 53, 54, 54, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 60, 60, 60, 61, 61, 61, 61, 63, 63, 64, 64, 64, 64, 64, 65, 65, 65, 66, 66, 67, 68, 68, 68, 68, 68, 69, 69, 69, 69, 71, 71, 72, 72, 72, 73, 74, 74, 74, 74, 75, 75, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 90, 90, 90, 91, 92, 92, 92, 93, 93, 94, 94, 94, 95, 95, 95, 95, 97, 97, 98, 99, 99, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
