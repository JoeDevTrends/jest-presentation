import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [81, 15, 20, 95, 94, 17, 46, 74, 15, 77];
    const expected = [15, 15, 17, 20, 46, 74, 77, 81, 94, 95];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [68, 69, 69, 16, 80, 95, 25, 26, 30, 73, 25, 79, 28, 6, 65, 67, 7, 58, 12, 20, 41, 82, 49, 80, 12, 90, 43, 43, 81, 41, 62, 36, 49, 37, 21, 32, 61, 9, 3, 77, 19, 88, 48, 67, 23, 2, 30, 79, 84, 9, 19, 7, 53, 45, 0, 39, 85, 80, 29, 59, 88, 81, 14, 25, 93, 54, 84, 50, 42, 30, 34, 18, 50, 96, 12, 27, 22, 30, 42, 10, 28, 95, 40, 68, 41, 9, 7, 41, 30, 66, 10, 90, 60, 89, 34, 1, 2, 48, 35, 16];
    const expected = [0, 1, 2, 2, 3, 6, 7, 7, 7, 9, 9, 9, 10, 10, 12, 12, 12, 14, 16, 16, 18, 19, 19, 20, 21, 22, 23, 25, 25, 25, 26, 27, 28, 28, 29, 30, 30, 30, 30, 30, 32, 34, 34, 35, 36, 37, 39, 40, 41, 41, 41, 41, 42, 42, 43, 43, 45, 48, 48, 49, 49, 50, 50, 53, 54, 58, 59, 60, 61, 62, 65, 66, 67, 67, 68, 68, 69, 69, 73, 77, 79, 79, 80, 80, 80, 81, 81, 82, 84, 84, 85, 88, 88, 89, 90, 90, 93, 95, 95, 96];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [90, 94, 85, 27, 74, 38, 25, 49, 11, 96, 63, 96, 74, 24, 31, 83, 68, 41, 57, 44, 4, 22, 29, 33, 68, 51, 16, 79, 4, 3, 7, 14, 9, 71, 44, 0, 44, 40, 28, 17, 23, 5, 58, 48, 53, 55, 13, 37, 38, 89, 73, 21, 34, 47, 48, 21, 51, 3, 48, 34, 23, 17, 84, 30, 54, 23, 21, 23, 97, 21, 62, 78, 50, 13, 97, 98, 13, 9, 61, 55, 74, 49, 92, 60, 44, 58, 68, 44, 38, 95, 3, 9, 67, 22, 85, 81, 43, 25, 73, 66, 79, 22, 95, 0, 69, 16, 58, 10, 1, 74, 57, 6, 8, 82, 66, 73, 6, 17, 55, 85, 23, 88, 31, 8, 67, 64, 49, 94, 24, 35, 30, 9, 16, 8, 11, 18, 20, 87, 21, 13, 42, 88, 71, 72, 17, 71, 50, 25, 86, 41, 2, 39, 54, 91, 69, 84, 76, 1, 79, 98, 20, 13, 9, 8, 67, 96, 20, 76, 16, 86, 30, 61, 76, 26, 30, 54, 88, 55, 54, 58, 23, 91, 56, 97, 44, 59, 86, 43, 7, 16, 11, 70, 50, 43, 70, 6, 0, 7, 48, 52, 79, 46, 52, 72, 97, 8, 27, 71, 56, 30, 75, 29, 84, 59, 21, 30, 48, 86, 64, 67, 35, 33, 1, 53, 59, 23, 51, 46, 0, 15, 36, 52, 97, 34, 4, 11, 74, 50, 70, 58, 84, 19, 73, 10, 91, 2, 74, 75, 74, 39];
    const expected = [0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 11, 11, 11, 11, 13, 13, 13, 13, 13, 14, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 25, 25, 25, 26, 27, 27, 28, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 33, 33, 34, 34, 34, 35, 35, 36, 37, 38, 38, 38, 39, 39, 40, 41, 41, 42, 43, 43, 43, 44, 44, 44, 44, 44, 44, 46, 46, 47, 48, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 57, 57, 58, 58, 58, 58, 58, 59, 59, 59, 60, 61, 61, 62, 63, 64, 64, 66, 66, 67, 67, 67, 67, 68, 68, 68, 69, 69, 70, 70, 70, 71, 71, 71, 71, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 76, 76, 76, 78, 79, 79, 79, 79, 81, 82, 83, 84, 84, 84, 84, 85, 85, 85, 86, 86, 86, 86, 87, 88, 88, 88, 89, 90, 91, 91, 91, 92, 94, 94, 95, 95, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
