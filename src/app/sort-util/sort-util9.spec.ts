import {
  SortUtil
} from './sort-util';

describe('sort-utils', () => {
  let suite = {
    sortUtil: < SortUtil > {}
  };
  beforeAll(() => {
    suite.sortUtil = new SortUtil();
  });
  afterAll(() => {
    suite = null;
  });

  test('should properly sort an array of positive integers', () => {
    // Arrange
    const numsToSort = [97, 68, 70, 78, 28, 42, 79, 10, 0, 92];
    const expected = [0, 10, 28, 42, 68, 70, 78, 79, 92, 97];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properl sort a large array of positive integers', () => {
    // Arrange
    const numsToSort = [60, 91, 35, 42, 79, 49, 25, 20, 84, 64, 70, 15, 60, 30, 38, 69, 42, 11, 77, 98, 60, 87, 0, 83, 45, 29, 17, 38, 34, 7, 41, 43, 57, 21, 48, 92, 44, 64, 87, 57, 48, 20, 23, 17, 58, 46, 59, 59, 30, 5, 99, 42, 71, 41, 73, 12, 32, 68, 92, 17, 17, 78, 34, 22, 39, 69, 77, 38, 86, 57, 90, 85, 74, 80, 65, 97, 14, 94, 32, 60, 57, 2, 89, 92, 15, 90, 94, 92, 6, 31, 18, 25, 8, 11, 94, 36, 17, 35, 24, 49];
    const expected = [0, 2, 5, 6, 7, 8, 11, 11, 12, 14, 15, 15, 17, 17, 17, 17, 17, 18, 20, 20, 21, 22, 23, 24, 25, 25, 29, 30, 30, 31, 32, 32, 34, 34, 35, 35, 36, 38, 38, 38, 39, 41, 41, 42, 42, 42, 43, 44, 45, 46, 48, 48, 49, 49, 57, 57, 57, 57, 58, 59, 59, 60, 60, 60, 60, 64, 64, 65, 68, 69, 69, 70, 71, 73, 74, 77, 77, 78, 79, 80, 83, 84, 85, 86, 87, 87, 89, 90, 90, 91, 92, 92, 92, 92, 94, 94, 94, 97, 98, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });

  test('should properly sort a larger array of positive integers', () => {
    // Arrange
    const numsToSort = [4, 31, 32, 8, 72, 8, 86, 30, 59, 20, 28, 9, 72, 2, 28, 22, 70, 29, 64, 96, 92, 54, 10, 3, 67, 79, 25, 88, 40, 15, 10, 54, 56, 43, 34, 46, 47, 3, 73, 48, 61, 63, 93, 49, 62, 50, 88, 2, 41, 46, 31, 79, 92, 86, 99, 39, 60, 90, 40, 3, 42, 29, 55, 38, 20, 45, 84, 43, 64, 73, 94, 83, 27, 72, 67, 65, 30, 41, 44, 37, 74, 50, 31, 25, 80, 53, 53, 7, 69, 59, 46, 71, 45, 73, 88, 7, 40, 98, 14, 28, 42, 29, 20, 85, 28, 93, 5, 91, 54, 45, 58, 56, 88, 5, 97, 40, 95, 5, 72, 86, 53, 85, 60, 3, 15, 0, 23, 37, 90, 28, 71, 96, 97, 86, 54, 3, 29, 37, 89, 8, 5, 4, 67, 53, 81, 56, 28, 21, 84, 27, 37, 3, 98, 12, 91, 16, 97, 74, 7, 44, 39, 81, 19, 1, 64, 28, 41, 93, 71, 44, 77, 22, 43, 91, 69, 83, 0, 5, 14, 88, 96, 27, 10, 88, 43, 58, 47, 80, 18, 61, 85, 74, 71, 76, 92, 52, 93, 41, 7, 69, 34, 35, 82, 57, 65, 77, 5, 26, 97, 50, 87, 43, 96, 14, 25, 49, 61, 87, 46, 68, 24, 91, 44, 82, 67, 20, 92, 95, 46, 86, 37, 19, 9, 70, 13, 80, 28, 14, 13, 3, 10, 96, 87, 22, 71, 61, 22, 80, 55, 75];
    const expected = [0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 10, 12, 13, 13, 14, 14, 14, 14, 15, 15, 16, 18, 19, 19, 20, 20, 20, 20, 21, 22, 22, 22, 22, 23, 24, 25, 25, 25, 26, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 31, 31, 31, 32, 34, 34, 35, 37, 37, 37, 37, 37, 38, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 43, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 48, 49, 49, 50, 50, 50, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 56, 56, 56, 57, 58, 58, 59, 59, 60, 60, 61, 61, 61, 61, 62, 63, 64, 64, 64, 65, 65, 67, 67, 67, 67, 68, 69, 69, 69, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 76, 77, 77, 79, 79, 80, 80, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86, 86, 86, 86, 86, 87, 87, 87, 88, 88, 88, 88, 88, 88, 89, 90, 90, 91, 91, 91, 91, 92, 92, 92, 92, 93, 93, 93, 93, 94, 95, 95, 96, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98, 99];

    // Act
    const actual = suite.sortUtil.getSortedNumArr(numsToSort);

    // Assert
    expect(actual).toEqual(expected);
  });
});
